<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <!-- spring -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:spring/spring-base.xml
            classpath:spring/spring-bean-asyncload.xml
            classpath:spring/spring-mvc.xml
            classpath:spring/spring-dubbo.xml
            classpath:spring/spring-datasource.xml
            classpath:spring/spring-job.xml
        </param-value>
    </context-param>
    <!-- 设置session超时时间
    <session-config>
        <session-timeout>1</session-timeout>
    </session-config> -->
    <!--如果super工程未准备就绪，这里请使用false，默认为true-->
    <context-param>
        <param-name>super_cookie_open</param-name>
        <param-value>false</param-value>
    </context-param>

    <!-- log4j -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j-server.xml</param-value>
    </context-param>
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>3000</param-value>
    </context-param>


    <!-- session appkey : 128 -->
    <context-param>
        <param-name>taobaosdk_app_key</param-name>
        <param-value>overseas</param-value>
    </context-param>
    <context-param>
        <param-name>appId</param-name>
        <param-value>3003</param-value>
    </context-param>

    <context-param>
        <param-name>session_app_key</param-name>
        <param-value>1025</param-value>
    </context-param>

    <!--动态获取secret-->
    <context-param>
        <param-name>call_back_class_name</param-name>
        <param-value>com.raycloud.overseas.erp.data.web.listener.SecretZkCallback</param-value>
    </context-param>

    <context-param>
        <param-name>groupdataid</param-name>
        <param-value>12011554</param-value>
    </context-param>
    <context-param>
        <param-name>secret_app_key</param-name>
        <param-value>overseas_erp_web</param-value>
    </context-param>


    <context-param>
        <param-name>super_session_app_key</param-name>
        <param-value>1025</param-value>
    </context-param>
    <context-param>
        <param-name>super_domain_host</param-name>
        <param-value>superseller.cn</param-value>
    </context-param>

    <!-- filter -->
    <filter>
        <filter-name>encodingfilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <!-- encoding utf-8 -->

    <filter-mapping>
        <filter-name>encodingfilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->
    <!-- 详细描述见http://blog.csdn.net/jadyer/article/details/11991457 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>


    <listener>
        <listener-class>com.raycloud.secretzk.client.ZkclientListener</listener-class>
    </listener>

    <!-- spring listener -->
    <!-- load spring -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!-- 先开启Log4J -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <listener>
        <listener-class>com.raycloud.overseas.erp.data.web.listener.InitDataListener</listener-class>
    </listener>
   <!-- <listener>
        <listener-class>com.raycloud.overseas.erp.web.listener.DataInitListener</listener-class>
    </listener>-->

    <!-- xss -->
    <!--<filter>-->
        <!--<filter-name>XssFilter</filter-name>-->
        <!--<filter-class>com.raycloud.utils.filter.XssFilter</filter-class>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>XssFilter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!-- trace log -->
    <!--开启Filter-->
    <filter>
        <filter-name>request_trace_id</filter-name>
        <filter-class>com.raycloud.eagle.trace.http.WebInvokeTraceFilter</filter-class>
        <!--不处理的后缀“|”多个用分割，不能有空格!,无特殊需求请保持注释-->
        <!--<init-param>-->
        <!--<param-name>unProcessSuffix</param-name>-->
        <!--<param-value>jpg|jpeg|png|gif|woff|css|js|xml|swf|icon</param-value>-->
        <!--</init-param>-->
        <!--从nginx获取的头信息的Key,默认值：request_trace_id,无特殊需求请保持注释-->
        <!--<init-param>-->
        <!--<param-name>headerName</param-name>-->
        <!--<param-value>request_trace_id</param-value>-->
        <!--</init-param>-->
        <!--从cookie获取淘宝Id的Key,默认值：visitorId,无特殊需求请保持注释-->
        <!--<init-param>-->
        <!--<param-name>cookieName</param-name>-->
        <!--<param-value>visitorId</param-value>-->
        <!--</init-param>-->
    </filter>
    <filter-mapping>
        <filter-name>request_trace_id</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- 配置shiro-->
    <!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
    <!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->
    <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
    <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
    <!--<filter>-->
    <!--<filter-name>shiroFilter</filter-name>-->
    <!--<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
    <!--<init-param>-->
    <!--&lt;!&ndash; 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 &ndash;&gt;-->
    <!--<param-name>targetFilterLifecycle</param-name>-->
    <!--<param-value>true</param-value>-->
    <!--</init-param>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
    <!--<filter-name>shiroFilter</filter-name>-->
    <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!--<servlet>-->
        <!--<servlet-name>Kaptcha</servlet-name>-->
        <!--<servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>-->
    <!--</servlet>-->
    <!--<servlet-mapping>-->
        <!--<servlet-name>Kaptcha</servlet-name>-->
        <!--<url-pattern>/validation.h5</url-pattern>-->
    <!--</servlet-mapping>-->

    <!--<servlet>-->
        <!--<servlet-name>callback</servlet-name>-->
        <!--<servlet-class>com.raycloud.overseas.erp.web.controller.image.CallbackServer</servlet-class>-->
    <!--</servlet>-->
    <!--<servlet-mapping>-->
        <!--<servlet-name>callback</servlet-name>-->
        <!--<url-pattern>/image/callback</url-pattern>-->
    <!--</servlet-mapping>-->

    <!-- 配置spring mvc -->
    <servlet>
        <servlet-name>mvc-servlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>mvc-servlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>mvc-servlet</servlet-name>
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
    <!--<servlet>-->
        <!--<servlet-name>BarcodeServlet</servlet-name>-->
        <!--<servlet-class>com.raycloud.overseas.erp.web.servlet.BarcodeServlet</servlet-class>-->
    <!--</servlet>-->

    <!--<servlet-mapping>-->
        <!--<servlet-name>BarcodeServlet</servlet-name>-->
        <!--<url-pattern>/barcode</url-pattern>-->
    <!--</servlet-mapping>-->
</web-app>
